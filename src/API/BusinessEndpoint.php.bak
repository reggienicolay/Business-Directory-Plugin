<?php
namespace BusinessDirectory\API;

use BusinessDirectory\Search\FilterHandler;
use BusinessDirectory\Search\QueryBuilder;
use BusinessDirectory\Utils\Cache;

class BusinessEndpoint {
    
    public static function init() {
        add_action('rest_api_init', [__CLASS__, 'register_routes']);
    }
    
    public static function register_routes() {
        // Enhanced businesses endpoint with filtering
        register_rest_route('bd/v1', '/businesses', [
            'methods' => 'GET',
            'callback' => [__CLASS__, 'get_businesses'],
            'permission_callback' => '__return_true',
            'args' => [
                'lat' => ['type' => 'number'],
                'lng' => ['type' => 'number'],
                'radius_km' => ['type' => 'number'],
                'categories' => ['type' => 'string'],
                'areas' => ['type' => 'string'],
                'price_level' => ['type' => 'string'],
                'min_rating' => ['type' => 'number'],
                'open_now' => ['type' => 'boolean'],
                'q' => ['type' => 'string'],
                'sort' => ['type' => 'string'],
                'page' => ['type' => 'integer', 'default' => 1],
                'per_page' => ['type' => 'integer', 'default' => 20],
            ],
        ]);
        
        // Filter metadata endpoint
        register_rest_route('bd/v1', '/filters', [
            'methods' => 'GET',
            'callback' => [__CLASS__, 'get_filter_metadata'],
            'permission_callback' => '__return_true',
        ]);
    }
    
    /**
     * Get filtered businesses
     */
    public static function get_businesses($request) {
        // Sanitize filters
        $filters = FilterHandler::sanitize_filters($request->get_params());
        
        // Check cache
        $cache_key = Cache::get_query_key($filters);
        $cached = get_transient($cache_key);
        
        if (false !== $cached) {
            return rest_ensure_response($cached);
        }
        
        // Build and execute query
        $query_builder = new QueryBuilder($filters);
        $result = $query_builder->get_businesses_with_location();
        
        // Format businesses
        $businesses = [];
        foreach ($result['businesses'] as $b) {
            $business = self::format_business($b['id']);
            
            // Add distance if available
            if (isset($b['distance_km'])) {
                $business['distance'] = [
                    'km' => round($b['distance_km'], 2),
                    'mi' => round($b['distance_mi'], 2),
                    'display' => round($b['distance_mi'], 1) . ' mi away',
                ];
            }
            
            $businesses[] = $business;
        }
        
        // Calculate map bounds
        $bounds = self::calculate_bounds($businesses);
        
        $response = [
            'businesses' => $businesses,
            'total' => $result['total'],
            'pages' => $result['pages'] ?? 0,
            'page' => $filters['page'],
            'per_page' => $filters['per_page'],
            'bounds' => $bounds,
            'filters_applied' => self::get_applied_filters($filters),
        ];
        
        // Cache for 5 minutes
        set_transient($cache_key, $response, 5 * MINUTE_IN_SECONDS);
        
        return rest_ensure_response($response);
    }
    
    /**
     * Format single business
     */
    private static function format_business($business_id) {
        $post = get_post($business_id);
        $location = get_post_meta($business_id, 'bd_location', true);
        $contact = get_post_meta($business_id, 'bd_contact', true);
        
        return [
            'id' => $business_id,
            'title' => get_the_title($business_id),
            'slug' => $post->post_name,
            'excerpt' => get_the_excerpt($business_id),
            'permalink' => get_permalink($business_id),
            'featured_image' => get_the_post_thumbnail_url($business_id, 'medium'),
            'rating' => floatval(get_post_meta($business_id, 'bd_avg_rating', true)),
            'review_count' => intval(get_post_meta($business_id, 'bd_review_count', true)),
            'price_level' => get_post_meta($business_id, 'bd_price_level', true),
            'categories' => wp_get_post_terms($business_id, 'business_category', ['fields' => 'names']),
            'areas' => wp_get_post_terms($business_id, 'business_area', ['fields' => 'names']),
            'location' => $location,
            'phone' => $contact['phone'] ?? '',
            'is_open_now' => FilterHandler::is_open_now($business_id),
        ];
    }
    
    /**
     * Calculate map bounds for all businesses
     */
    private static function calculate_bounds($businesses) {
        if (empty($businesses)) {
            return null;
        }
        
        $lats = [];
        $lngs = [];
        
        foreach ($businesses as $business) {
            if (!empty($business['location']['lat']) && !empty($business['location']['lng'])) {
                $lats[] = $business['location']['lat'];
                $lngs[] = $business['location']['lng'];
            }
        }
        
        if (empty($lats)) {
            return null;
        }
        
        return [
            'north' => max($lats),
            'south' => min($lats),
            'east' => max($lngs),
            'west' => min($lngs),
        ];
    }
    
    /**
     * Get summary of applied filters
     */
    private static function get_applied_filters($filters) {
        $applied = [];
        
        if (!empty($filters['categories'])) {
            $applied['categories'] = count($filters['categories']);
        }
        if (!empty($filters['areas'])) {
            $applied['areas'] = count($filters['areas']);
        }
        if (!empty($filters['price_level'])) {
            $applied['price_level'] = $filters['price_level'];
        }
        if (!empty($filters['min_rating'])) {
            $applied['min_rating'] = $filters['min_rating'];
        }
        if (!empty($filters['open_now'])) {
            $applied['open_now'] = true;
        }
        if (!empty($filters['q'])) {
            $applied['search'] = $filters['q'];
        }
        if (!empty($filters['radius_km'])) {
            $applied['radius_km'] = $filters['radius_km'];
        }
        
        return $applied;
    }
    
    /**
     * Get filter metadata
     */
    public static function get_filter_metadata() {
        $metadata = FilterHandler::get_filter_metadata();
        return rest_ensure_response($metadata);
    }
}
